<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 设置SpringMvc自动注入驱动 ， 放置在最上方 -->
    <mvc:annotation-driven></mvc:annotation-driven>
    <!-- 将静态资源的请求，转给Web应用服务器默认的Servlet处理 -->
    <mvc:default-servlet-handler />



    <!-- 自动侦探Bean中的切面 -->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
    <!-- 设置自动扫描包 xxxx -->
    <context:component-scan base-package="com.isoft"></context:component-scan>

    <!-- 1. 配置数据源 -->
    <!--  导入数据源设置的属性文件 -->
    <context:property-placeholder location="classpath:db.properties" />
    <!-- 2. 配置Druid数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" lazy-init="true">
        <!-- 数据库基本信息配置 -->
        <property name="driverClassName" value="${mysql.driver}" />
        <property name="url" value="${mysql.url}" />
        <property name="username" value="${mysql.username}" />
        <property name="password" value="${mysql.userpass}" />
    </bean>
    <!-- 3. 整合MyBatis -->
    <!-- 配置SqlSessionFactory对象  -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 扫描entity包 使用别名 -->
        <property name="typeAliasesPackage" value="com.isoft.entity" />
        <!-- 扫描sql的Mapper需要的xml文件配置文件: 如果有xml映射文件，则需要添加以下项  -->
        <!-- <property name="mapperLocations" value="classpath:com/isoft/dao/*.xml" /> -->
        <!-- 如果仍然有MyBatis的配置文件，添加以下项 -->
        <!-- <property name="configLocation" value="classpath:mybatis-config.xml"></property>  -->
    </bean>
    <!-- 4. 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.isoft.dao"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- 5. 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--  配置事务传播特性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>  <!-- 读取数据隔离级别为只读 -->
            <tx:method name="*"/> <!-- 其他操作使用默认隔离级别 -->
        </tx:attributes>
    </tx:advice>
    <!-- 配置事务切点，并把事务切点和事务属性关联起来 -->
    <aop:config>
        <aop:pointcut expression="execution(* com.isoft.service.*.*(..))" id="txPointcut"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>


    <!--  配置SpringMvc视图解析器   -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 访问页面的前缀【路径，必须“/”开头】：设置项目的所有页面 html都是在项目/目录 -->
        <property name="prefix" value="/"></property>
        <!-- 后缀：指明页面的扩展名 -->
        <property name="suffix" value=".html"></property>
    </bean>
    <!-- 文件上传配置 -->
    <!-- multipartResolver名字不能改，它和后台DispatcherServlet中的常量保持一致，自动注入 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8"></property>
        <property name="maxUploadSize" value="104857600"></property>
        <property name="maxInMemorySize" value="4096"></property>
    </bean>


</beans>